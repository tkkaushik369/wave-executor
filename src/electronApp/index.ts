import { app, BrowserWindow, ipcMain, nativeTheme, screen } from 'electron'
// import Squirrel from 'electron-squirrel-startup'
// import path from 'node:path';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string
declare const CLIENT_WINDOW_WEBPACK_ENTRY: string

const QuitHandle = () => {
	app.quit()
}

process.env.FRAME_VISBLE = 'true' // 'true' or 'false'

// let progressIntervalWin1: ReturnType<typeof setInterval>;
// let progressIntervalWin2: ReturnType<typeof setInterval>;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
// if (Squirrel) QuitHandle()
/* if (require('electron-squirrel-startup')) {
	QuitHandle();
} */

const createBrowserWindow = (path: string, x?: number, y?: number, devTools?: Electron.OpenDevToolsOptions) => {
	// Get the primary display's dimensions
	const { width: screenWidth } = screen.getPrimaryDisplay().workAreaSize
	var windowWidth = 600 // Set the window width
	var windowHeight = 400 // Set the window height

	// Create the browser window.
	const frameLess = {
		frame: false,
		transparent: true,
		titleBarStyle: 'hidden',
		titleBarOverlay: {
			color: '#2f324188',
			symbolColor: '#74b1be88',
			height: 20,
		},
	}

	var browserOptions = {
		// icon: '/path/to/icon.png',
		height: windowHeight,
		width: windowWidth,
		x: screenWidth - windowWidth - (x ?? 0),
		y: y,
		webPreferences: {
			nodeIntegration: true,
			contextIsolation: false,
		},
	}

	var finalbrowserOptions = Object.assign({}, browserOptions)
	if (process.env.FRAME_VISBLE !== 'true') {
		finalbrowserOptions = Object.assign(finalbrowserOptions, frameLess)
	}
	const mainWindow = new BrowserWindow(finalbrowserOptions as Electron.BrowserWindowConstructorOptions)

	// and load the index.html of the app.
	mainWindow.loadURL(path)

	// Open the DevTools.
	if (process.env.FRAME_VISBLE !== 'true') {
		mainWindow.setAlwaysOnTop(true, 'normal')
	} else {
		mainWindow.webContents.openDevTools(devTools)
	}

	const INCREMENT = 0.03
	const INTERVAL_DELAY = 100 // ms

	let c = 0
	/* let progressInterval = setInterval(() => {
		// update progress bar to next value
		// values between 0 and 1 will show progress, >1 will show indeterminate or stick at 100%
		mainWindow.setProgressBar(c);

		// increment or reset progress bar
		if (c < 2) {
			c += INCREMENT;
		} else {
			c = -INCREMENT * 5; // reset to a bit less than 0 to show reset state
		}
	}, INTERVAL_DELAY); */

	// return progressInterval
}

const createWindow = (): void => {
	// /* progressIntervalWin1 = */ createBrowserWindow(MAIN_WINDOW_WEBPACK_ENTRY)
	// /* progressIntervalWin1 = */ createBrowserWindow(CLIENT_WINDOW_WEBPACK_ENTRY)

	/* progressIntervalWin1 = */ createBrowserWindow(MAIN_WINDOW_WEBPACK_ENTRY, 0, 0)
	/* progressIntervalWin2 = */ createBrowserWindow(CLIENT_WINDOW_WEBPACK_ENTRY, 0, 500)
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.whenReady().then(() => {
	ipcMain.handle('ping', async () => {
		return 'pong'
	})

	ipcMain.handle('titlebar', async (event) => {
		const win = BrowserWindow.fromWebContents(event.sender)
		if (win !== null) {
			return win.accessibleTitle
		}
		return null
	})

	ipcMain.handle('dark-mode:light', () => {
		if (nativeTheme.shouldUseDarkColors) nativeTheme.themeSource = 'light'
		return nativeTheme.shouldUseDarkColors
	})

	ipcMain.handle('dark-mode:dark', () => {
		if (!nativeTheme.shouldUseDarkColors) nativeTheme.themeSource = 'dark'
		return nativeTheme.shouldUseDarkColors
	})

	ipcMain.on('set-ignore-mouse-events', (event, ignore, options) => {
		const win = BrowserWindow.fromWebContents(event.sender)
		if (win !== null) {
			win.setIgnoreMouseEvents(ignore, options)
		}
	})

	createWindow()

	app.on('activate', () => {
		// On OS X it's common to re-create a window in the app when the
		// dock icon is clicked and there are no other windows open.
		if (BrowserWindow.getAllWindows().length === 0) {
			createWindow()
		}
	})
})

// before the app is terminated, clear both timers
app.on('before-quit', () => {
	// clearInterval(progressIntervalWin1);
	// clearInterval(progressIntervalWin2);
})

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
	if (process.platform !== 'darwin') QuitHandle()
})

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
